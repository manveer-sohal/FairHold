/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Agreement {
  export type MilestoneStruct = {
    amount: BigNumberish;
    description: string;
    released: boolean;
  };

  export type MilestoneStructOutput = [
    amount: bigint,
    description: string,
    released: boolean
  ] & { amount: bigint; description: string; released: boolean };
}

export interface AgreementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "customer"
      | "fund"
      | "getMilestones"
      | "isNative"
      | "milestones"
      | "releaseMilestone"
      | "token"
      | "totalFunded"
      | "totalReleased"
      | "totalWithdrawn"
      | "vendor"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Funded" | "MilestoneReleased" | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "customer", values?: undefined): string;
  encodeFunctionData(functionFragment: "fund", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getMilestones",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isNative", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vendor", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "customer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vendor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FundedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneReleasedEvent {
  export type InputTuple = [
    index: BigNumberish,
    amount: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    index: bigint,
    amount: bigint,
    description: string
  ];
  export interface OutputObject {
    index: bigint;
    amount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Agreement extends BaseContract {
  connect(runner?: ContractRunner | null): Agreement;
  waitForDeployment(): Promise<this>;

  interface: AgreementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  customer: TypedContractMethod<[], [string], "view">;

  fund: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  getMilestones: TypedContractMethod<
    [],
    [Agreement.MilestoneStructOutput[]],
    "view"
  >;

  isNative: TypedContractMethod<[], [boolean], "view">;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        amount: bigint;
        description: string;
        released: boolean;
      }
    ],
    "view"
  >;

  releaseMilestone: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalFunded: TypedContractMethod<[], [bigint], "view">;

  totalReleased: TypedContractMethod<[], [bigint], "view">;

  totalWithdrawn: TypedContractMethod<[], [bigint], "view">;

  vendor: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "customer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getMilestones"
  ): TypedContractMethod<[], [Agreement.MilestoneStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "isNative"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        amount: bigint;
        description: string;
        released: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "releaseMilestone"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalFunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReleased"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vendor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneReleased"
  ): TypedContractEvent<
    MilestoneReleasedEvent.InputTuple,
    MilestoneReleasedEvent.OutputTuple,
    MilestoneReleasedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Funded(address,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "MilestoneReleased(uint256,uint256,string)": TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;
    MilestoneReleased: TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
