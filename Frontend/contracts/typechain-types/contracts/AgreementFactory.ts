/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Agreement {
  export type MilestoneStruct = {
    amount: BigNumberish;
    description: string;
    released: boolean;
  };

  export type MilestoneStructOutput = [
    amount: bigint,
    description: string,
    released: boolean
  ] & { amount: bigint; description: string; released: boolean };
}

export interface AgreementFactoryInterface extends Interface {
  getFunction(nameOrSignature: "createAgreement"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [AddressLike, AddressLike, boolean, Agreement.MilestoneStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
}

export namespace AgreementCreatedEvent {
  export type InputTuple = [
    agreement: AddressLike,
    customer: AddressLike,
    vendor: AddressLike,
    token: AddressLike,
    isNative: boolean
  ];
  export type OutputTuple = [
    agreement: string,
    customer: string,
    vendor: string,
    token: string,
    isNative: boolean
  ];
  export interface OutputObject {
    agreement: string;
    customer: string;
    vendor: string;
    token: string;
    isNative: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgreementFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AgreementFactory;
  waitForDeployment(): Promise<this>;

  interface: AgreementFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAgreement: TypedContractMethod<
    [
      vendor: AddressLike,
      token: AddressLike,
      isNative: boolean,
      milestones: Agreement.MilestoneStruct[]
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAgreement"
  ): TypedContractMethod<
    [
      vendor: AddressLike,
      token: AddressLike,
      isNative: boolean,
      milestones: Agreement.MilestoneStruct[]
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "AgreementCreated"
  ): TypedContractEvent<
    AgreementCreatedEvent.InputTuple,
    AgreementCreatedEvent.OutputTuple,
    AgreementCreatedEvent.OutputObject
  >;

  filters: {
    "AgreementCreated(address,address,address,address,bool)": TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
    AgreementCreated: TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
  };
}
