--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/factories/@openzeppelin/contracts/token/index.ts:
--------------------------------------------------------------------------------
1 | /* Autogenerated file. Do not edit manually. */
2 | /* tslint:disable */
3 | /* eslint-disable */
4 | export * as erc20 from "./ERC20";
5 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/factories/@openzeppelin/index.ts:
--------------------------------------------------------------------------------
1 | /* Autogenerated file. Do not edit manually. */
2 | /* tslint:disable */
3 | /* eslint-disable */
4 | export * as contracts from "./contracts";
5 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/factories/contracts/AgreementFactory__factory.ts:
--------------------------------------------------------------------------------
  1 | /* Autogenerated file. Do not edit manually. */
  2 | /* tslint:disable */
  3 | /* eslint-disable */
  4 | import {
  5 |   Contract,
  6 |   ContractFactory,
  7 |   ContractTransactionResponse,
  8 |   Interface,
  9 | } from "ethers";
 10 | import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
 11 | import type { NonPayableOverrides } from "../../common";
 12 | import type {
 13 |   AgreementFactory,
 14 |   AgreementFactoryInterface,
 15 | } from "../../contracts/AgreementFactory";
 16 | 
 17 | const _abi = [
 18 |   {
 19 |     anonymous: false,
 20 |     inputs: [
 21 |       {
 22 |         indexed: true,
 23 |         internalType: "address",
 24 |         name: "agreement",
 25 |         type: "address",
 26 |       },
 27 |       {
 28 |         indexed: true,
 29 |         internalType: "address",
 30 |         name: "customer",
 31 |         type: "address",
 32 |       },
 33 |       {
 34 |         indexed: true,
 35 |         internalType: "address",
 36 |         name: "vendor",
 37 |         type: "address",
 38 |       },
 39 |       {
 40 |         indexed: false,
 41 |         internalType: "address",
 42 |         name: "token",
 43 |         type: "address",
 44 |       },
 45 |       {
 46 |         indexed: false,
 47 |         internalType: "bool",
 48 |         name: "isNative",
 49 |         type: "bool",
 50 |       },
 51 |     ],
 52 |     name: "AgreementCreated",
 53 |     type: "event",
 54 |   },
 55 |   {
 56 |     inputs: [
 57 |       {
 58 |         internalType: "address",
 59 |         name: "vendor",
 60 |         type: "address",
 61 |       },
 62 |       {
 63 |         internalType: "address",
 64 |         name: "token",
 65 |         type: "address",
 66 |       },
 67 |       {
 68 |         internalType: "bool",
 69 |         name: "isNative",
 70 |         type: "bool",
 71 |       },
 72 |       {
 73 |         components: [
 74 |           {
 75 |             internalType: "uint256",
 76 |             name: "amount",
 77 |             type: "uint256",
 78 |           },
 79 |           {
 80 |             internalType: "string",
 81 |             name: "description",
 82 |             type: "string",
 83 |           },
 84 |           {
 85 |             internalType: "bool",
 86 |             name: "released",
 87 |             type: "bool",
 88 |           },
 89 |         ],
 90 |         internalType: "struct Agreement.Milestone[]",
 91 |         name: "milestones",
 92 |         type: "tuple[]",
 93 |       },
 94 |     ],
 95 |     name: "createAgreement",
 96 |     outputs: [
 97 |       {
 98 |         internalType: "address",
 99 |         name: "addr",
100 |         type: "address",
101 |       },
102 |     ],
103 |     stateMutability: "nonpayable",
104 |     type: "function",
105 |   },
106 | ] as const;
107 | 
108 | const _bytecode =
109 |   "";
110 | 
111 | type AgreementFactoryConstructorParams =
112 |   | [signer?: Signer]
113 |   | ConstructorParameters<typeof ContractFactory>;
114 | 
115 | const isSuperArgs = (
116 |   xs: AgreementFactoryConstructorParams
117 | ): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;
118 | 
119 | export class AgreementFactory__factory extends ContractFactory {
120 |   constructor(...args: AgreementFactoryConstructorParams) {
121 |     if (isSuperArgs(args)) {
122 |       super(...args);
123 |     } else {
124 |       super(_abi, _bytecode, args[0]);
125 |     }
126 |   }
127 | 
128 |   override getDeployTransaction(
129 |     overrides?: NonPayableOverrides & { from?: string }
130 |   ): Promise<ContractDeployTransaction> {
131 |     return super.getDeployTransaction(overrides || {});
132 |   }
133 |   override deploy(overrides?: NonPayableOverrides & { from?: string }) {
134 |     return super.deploy(overrides || {}) as Promise<
135 |       AgreementFactory & {
136 |         deploymentTransaction(): ContractTransactionResponse;
137 |       }
138 |     >;
139 |   }
140 |   override connect(runner: ContractRunner | null): AgreementFactory__factory {
141 |     return super.connect(runner) as AgreementFactory__factory;
142 |   }
143 | 
144 |   static readonly bytecode = _bytecode;
145 |   static readonly abi = _abi;
146 |   static createInterface(): AgreementFactoryInterface {
147 |     return new Interface(_abi) as AgreementFactoryInterface;
148 |   }
149 |   static connect(
150 |     address: string,
151 |     runner?: ContractRunner | null
152 |   ): AgreementFactory {
153 |     return new Contract(address, _abi, runner) as unknown as AgreementFactory;
154 |   }
155 | }
156 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/factories/contracts/Agreement__factory.ts:
--------------------------------------------------------------------------------
  1 | /* Autogenerated file. Do not edit manually. */
  2 | /* tslint:disable */
  3 | /* eslint-disable */
  4 | import {
  5 |   Contract,
  6 |   ContractFactory,
  7 |   ContractTransactionResponse,
  8 |   Interface,
  9 | } from "ethers";
 10 | import type {
 11 |   Signer,
 12 |   AddressLike,
 13 |   ContractDeployTransaction,
 14 |   ContractRunner,
 15 | } from "ethers";
 16 | import type { NonPayableOverrides } from "../../common";
 17 | import type { Agreement, AgreementInterface } from "../../contracts/Agreement";
 18 | 
 19 | const _abi = [
 20 |   {
 21 |     inputs: [
 22 |       {
 23 |         internalType: "address",
 24 |         name: "_customer",
 25 |         type: "address",
 26 |       },
 27 |       {
 28 |         internalType: "address",
 29 |         name: "_vendor",
 30 |         type: "address",
 31 |       },
 32 |       {
 33 |         internalType: "address",
 34 |         name: "_token",
 35 |         type: "address",
 36 |       },
 37 |       {
 38 |         internalType: "bool",
 39 |         name: "_isNative",
 40 |         type: "bool",
 41 |       },
 42 |       {
 43 |         components: [
 44 |           {
 45 |             internalType: "uint256",
 46 |             name: "amount",
 47 |             type: "uint256",
 48 |           },
 49 |           {
 50 |             internalType: "string",
 51 |             name: "description",
 52 |             type: "string",
 53 |           },
 54 |           {
 55 |             internalType: "bool",
 56 |             name: "released",
 57 |             type: "bool",
 58 |           },
 59 |         ],
 60 |         internalType: "struct Agreement.Milestone[]",
 61 |         name: "_milestones",
 62 |         type: "tuple[]",
 63 |       },
 64 |     ],
 65 |     stateMutability: "nonpayable",
 66 |     type: "constructor",
 67 |   },
 68 |   {
 69 |     anonymous: false,
 70 |     inputs: [
 71 |       {
 72 |         indexed: true,
 73 |         internalType: "address",
 74 |         name: "from",
 75 |         type: "address",
 76 |       },
 77 |       {
 78 |         indexed: false,
 79 |         internalType: "uint256",
 80 |         name: "amount",
 81 |         type: "uint256",
 82 |       },
 83 |     ],
 84 |     name: "Funded",
 85 |     type: "event",
 86 |   },
 87 |   {
 88 |     anonymous: false,
 89 |     inputs: [
 90 |       {
 91 |         indexed: true,
 92 |         internalType: "uint256",
 93 |         name: "index",
 94 |         type: "uint256",
 95 |       },
 96 |       {
 97 |         indexed: false,
 98 |         internalType: "uint256",
 99 |         name: "amount",
100 |         type: "uint256",
101 |       },
102 |       {
103 |         indexed: false,
104 |         internalType: "string",
105 |         name: "description",
106 |         type: "string",
107 |       },
108 |     ],
109 |     name: "MilestoneReleased",
110 |     type: "event",
111 |   },
112 |   {
113 |     anonymous: false,
114 |     inputs: [
115 |       {
116 |         indexed: true,
117 |         internalType: "address",
118 |         name: "to",
119 |         type: "address",
120 |       },
121 |       {
122 |         indexed: false,
123 |         internalType: "uint256",
124 |         name: "amount",
125 |         type: "uint256",
126 |       },
127 |     ],
128 |     name: "Withdrawn",
129 |     type: "event",
130 |   },
131 |   {
132 |     inputs: [],
133 |     name: "customer",
134 |     outputs: [
135 |       {
136 |         internalType: "address",
137 |         name: "",
138 |         type: "address",
139 |       },
140 |     ],
141 |     stateMutability: "view",
142 |     type: "function",
143 |   },
144 |   {
145 |     inputs: [
146 |       {
147 |         internalType: "uint256",
148 |         name: "amount",
149 |         type: "uint256",
150 |       },
151 |     ],
152 |     name: "fund",
153 |     outputs: [],
154 |     stateMutability: "payable",
155 |     type: "function",
156 |   },
157 |   {
158 |     inputs: [],
159 |     name: "getMilestones",
160 |     outputs: [
161 |       {
162 |         components: [
163 |           {
164 |             internalType: "uint256",
165 |             name: "amount",
166 |             type: "uint256",
167 |           },
168 |           {
169 |             internalType: "string",
170 |             name: "description",
171 |             type: "string",
172 |           },
173 |           {
174 |             internalType: "bool",
175 |             name: "released",
176 |             type: "bool",
177 |           },
178 |         ],
179 |         internalType: "struct Agreement.Milestone[]",
180 |         name: "all",
181 |         type: "tuple[]",
182 |       },
183 |     ],
184 |     stateMutability: "view",
185 |     type: "function",
186 |   },
187 |   {
188 |     inputs: [],
189 |     name: "isNative",
190 |     outputs: [
191 |       {
192 |         internalType: "bool",
193 |         name: "",
194 |         type: "bool",
195 |       },
196 |     ],
197 |     stateMutability: "view",
198 |     type: "function",
199 |   },
200 |   {
201 |     inputs: [
202 |       {
203 |         internalType: "uint256",
204 |         name: "",
205 |         type: "uint256",
206 |       },
207 |     ],
208 |     name: "milestones",
209 |     outputs: [
210 |       {
211 |         internalType: "uint256",
212 |         name: "amount",
213 |         type: "uint256",
214 |       },
215 |       {
216 |         internalType: "string",
217 |         name: "description",
218 |         type: "string",
219 |       },
220 |       {
221 |         internalType: "bool",
222 |         name: "released",
223 |         type: "bool",
224 |       },
225 |     ],
226 |     stateMutability: "view",
227 |     type: "function",
228 |   },
229 |   {
230 |     inputs: [
231 |       {
232 |         internalType: "uint256",
233 |         name: "index",
234 |         type: "uint256",
235 |       },
236 |     ],
237 |     name: "releaseMilestone",
238 |     outputs: [],
239 |     stateMutability: "nonpayable",
240 |     type: "function",
241 |   },
242 |   {
243 |     inputs: [],
244 |     name: "token",
245 |     outputs: [
246 |       {
247 |         internalType: "address",
248 |         name: "",
249 |         type: "address",
250 |       },
251 |     ],
252 |     stateMutability: "view",
253 |     type: "function",
254 |   },
255 |   {
256 |     inputs: [],
257 |     name: "totalFunded",
258 |     outputs: [
259 |       {
260 |         internalType: "uint256",
261 |         name: "",
262 |         type: "uint256",
263 |       },
264 |     ],
265 |     stateMutability: "view",
266 |     type: "function",
267 |   },
268 |   {
269 |     inputs: [],
270 |     name: "totalReleased",
271 |     outputs: [
272 |       {
273 |         internalType: "uint256",
274 |         name: "",
275 |         type: "uint256",
276 |       },
277 |     ],
278 |     stateMutability: "view",
279 |     type: "function",
280 |   },
281 |   {
282 |     inputs: [],
283 |     name: "totalWithdrawn",
284 |     outputs: [
285 |       {
286 |         internalType: "uint256",
287 |         name: "",
288 |         type: "uint256",
289 |       },
290 |     ],
291 |     stateMutability: "view",
292 |     type: "function",
293 |   },
294 |   {
295 |     inputs: [],
296 |     name: "vendor",
297 |     outputs: [
298 |       {
299 |         internalType: "address",
300 |         name: "",
301 |         type: "address",
302 |       },
303 |     ],
304 |     stateMutability: "view",
305 |     type: "function",
306 |   },
307 |   {
308 |     inputs: [],
309 |     name: "withdraw",
310 |     outputs: [],
311 |     stateMutability: "nonpayable",
312 |     type: "function",
313 |   },
314 | ] as const;
315 | 
316 | const _bytecode =
317 |   "";
318 | 
319 | type AgreementConstructorParams =
320 |   | [signer?: Signer]
321 |   | ConstructorParameters<typeof ContractFactory>;
322 | 
323 | const isSuperArgs = (
324 |   xs: AgreementConstructorParams
325 | ): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;
326 | 
327 | export class Agreement__factory extends ContractFactory {
328 |   constructor(...args: AgreementConstructorParams) {
329 |     if (isSuperArgs(args)) {
330 |       super(...args);
331 |     } else {
332 |       super(_abi, _bytecode, args[0]);
333 |     }
334 |   }
335 | 
336 |   override getDeployTransaction(
337 |     _customer: AddressLike,
338 |     _vendor: AddressLike,
339 |     _token: AddressLike,
340 |     _isNative: boolean,
341 |     _milestones: Agreement.MilestoneStruct[],
342 |     overrides?: NonPayableOverrides & { from?: string }
343 |   ): Promise<ContractDeployTransaction> {
344 |     return super.getDeployTransaction(
345 |       _customer,
346 |       _vendor,
347 |       _token,
348 |       _isNative,
349 |       _milestones,
350 |       overrides || {}
351 |     );
352 |   }
353 |   override deploy(
354 |     _customer: AddressLike,
355 |     _vendor: AddressLike,
356 |     _token: AddressLike,
357 |     _isNative: boolean,
358 |     _milestones: Agreement.MilestoneStruct[],
359 |     overrides?: NonPayableOverrides & { from?: string }
360 |   ) {
361 |     return super.deploy(
362 |       _customer,
363 |       _vendor,
364 |       _token,
365 |       _isNative,
366 |       _milestones,
367 |       overrides || {}
368 |     ) as Promise<
369 |       Agreement & {
370 |         deploymentTransaction(): ContractTransactionResponse;
371 |       }
372 |     >;
373 |   }
374 |   override connect(runner: ContractRunner | null): Agreement__factory {
375 |     return super.connect(runner) as Agreement__factory;
376 |   }
377 | 
378 |   static readonly bytecode = _bytecode;
379 |   static readonly abi = _abi;
380 |   static createInterface(): AgreementInterface {
381 |     return new Interface(_abi) as AgreementInterface;
382 |   }
383 |   static connect(address: string, runner?: ContractRunner | null): Agreement {
384 |     return new Contract(address, _abi, runner) as unknown as Agreement;
385 |   }
386 | }
387 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/factories/contracts/index.ts:
--------------------------------------------------------------------------------
1 | /* Autogenerated file. Do not edit manually. */
2 | /* tslint:disable */
3 | /* eslint-disable */
4 | export { Agreement__factory } from "./Agreement__factory";
5 | export { AgreementFactory__factory } from "./AgreementFactory__factory";
6 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/factories/index.ts:
--------------------------------------------------------------------------------
1 | /* Autogenerated file. Do not edit manually. */
2 | /* tslint:disable */
3 | /* eslint-disable */
4 | export * as openzeppelin from "./@openzeppelin";
5 | export * as contracts from "./contracts";
6 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/hardhat.d.ts:
--------------------------------------------------------------------------------
  1 | /* Autogenerated file. Do not edit manually. */
  2 | /* tslint:disable */
  3 | /* eslint-disable */
  4 | 
  5 | import { ethers } from "ethers";
  6 | import {
  7 |   DeployContractOptions,
  8 |   FactoryOptions,
  9 |   HardhatEthersHelpers as HardhatEthersHelpersBase,
 10 | } from "@nomicfoundation/hardhat-ethers/types";
 11 | 
 12 | import * as Contracts from ".";
 13 | 
 14 | declare module "hardhat/types/runtime" {
 15 |   interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
 16 |     getContractFactory(
 17 |       name: "IERC20",
 18 |       signerOrOptions?: ethers.Signer | FactoryOptions
 19 |     ): Promise<Contracts.IERC20__factory>;
 20 |     getContractFactory(
 21 |       name: "Agreement",
 22 |       signerOrOptions?: ethers.Signer | FactoryOptions
 23 |     ): Promise<Contracts.Agreement__factory>;
 24 |     getContractFactory(
 25 |       name: "AgreementFactory",
 26 |       signerOrOptions?: ethers.Signer | FactoryOptions
 27 |     ): Promise<Contracts.AgreementFactory__factory>;
 28 | 
 29 |     getContractAt(
 30 |       name: "IERC20",
 31 |       address: string | ethers.Addressable,
 32 |       signer?: ethers.Signer
 33 |     ): Promise<Contracts.IERC20>;
 34 |     getContractAt(
 35 |       name: "Agreement",
 36 |       address: string | ethers.Addressable,
 37 |       signer?: ethers.Signer
 38 |     ): Promise<Contracts.Agreement>;
 39 |     getContractAt(
 40 |       name: "AgreementFactory",
 41 |       address: string | ethers.Addressable,
 42 |       signer?: ethers.Signer
 43 |     ): Promise<Contracts.AgreementFactory>;
 44 | 
 45 |     deployContract(
 46 |       name: "IERC20",
 47 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 48 |     ): Promise<Contracts.IERC20>;
 49 |     deployContract(
 50 |       name: "Agreement",
 51 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 52 |     ): Promise<Contracts.Agreement>;
 53 |     deployContract(
 54 |       name: "AgreementFactory",
 55 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 56 |     ): Promise<Contracts.AgreementFactory>;
 57 | 
 58 |     deployContract(
 59 |       name: "IERC20",
 60 |       args: any[],
 61 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 62 |     ): Promise<Contracts.IERC20>;
 63 |     deployContract(
 64 |       name: "Agreement",
 65 |       args: any[],
 66 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 67 |     ): Promise<Contracts.Agreement>;
 68 |     deployContract(
 69 |       name: "AgreementFactory",
 70 |       args: any[],
 71 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 72 |     ): Promise<Contracts.AgreementFactory>;
 73 | 
 74 |     // default types
 75 |     getContractFactory(
 76 |       name: string,
 77 |       signerOrOptions?: ethers.Signer | FactoryOptions
 78 |     ): Promise<ethers.ContractFactory>;
 79 |     getContractFactory(
 80 |       abi: any[],
 81 |       bytecode: ethers.BytesLike,
 82 |       signer?: ethers.Signer
 83 |     ): Promise<ethers.ContractFactory>;
 84 |     getContractAt(
 85 |       nameOrAbi: string | any[],
 86 |       address: string | ethers.Addressable,
 87 |       signer?: ethers.Signer
 88 |     ): Promise<ethers.Contract>;
 89 |     deployContract(
 90 |       name: string,
 91 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 92 |     ): Promise<ethers.Contract>;
 93 |     deployContract(
 94 |       name: string,
 95 |       args: any[],
 96 |       signerOrOptions?: ethers.Signer | DeployContractOptions
 97 |     ): Promise<ethers.Contract>;
 98 |   }
 99 | }
100 | 


--------------------------------------------------------------------------------
/Frontend/contracts/typechain-types/index.ts:
--------------------------------------------------------------------------------
 1 | /* Autogenerated file. Do not edit manually. */
 2 | /* tslint:disable */
 3 | /* eslint-disable */
 4 | import type * as openzeppelin from "./@openzeppelin";
 5 | export type { openzeppelin };
 6 | import type * as contracts from "./contracts";
 7 | export type { contracts };
 8 | export * as factories from "./factories";
 9 | export type { IERC20 } from "./@openzeppelin/contracts/token/ERC20/IERC20";
10 | export { IERC20__factory } from "./factories/@openzeppelin/contracts/token/ERC20/IERC20__factory";
11 | export type { Agreement } from "./contracts/Agreement";
12 | export { Agreement__factory } from "./factories/contracts/Agreement__factory";
13 | export type { AgreementFactory } from "./contracts/AgreementFactory";
14 | export { AgreementFactory__factory } from "./factories/contracts/AgreementFactory__factory";
15 | 


--------------------------------------------------------------------------------
/Frontend/lib/escrowAbi.ts:
--------------------------------------------------------------------------------
  1 | // Human-readable ABI strings with tuples can be picky across abitype versions.
  2 | // Use explicit JSON ABI objects to avoid `InvalidParameterError` on tuple[] params.
  3 | 
  4 | export const factoryAbi = [
  5 |   {
  6 |     type: "event",
  7 |     name: "AgreementCreated",
  8 |     inputs: [
  9 |       {
 10 |         indexed: true,
 11 |         internalType: "address",
 12 |         name: "agreement",
 13 |         type: "address",
 14 |       },
 15 |       {
 16 |         indexed: true,
 17 |         internalType: "address",
 18 |         name: "customer",
 19 |         type: "address",
 20 |       },
 21 |       {
 22 |         indexed: true,
 23 |         internalType: "address",
 24 |         name: "vendor",
 25 |         type: "address",
 26 |       },
 27 |       {
 28 |         indexed: false,
 29 |         internalType: "address",
 30 |         name: "token",
 31 |         type: "address",
 32 |       },
 33 |       { indexed: false, internalType: "bool", name: "isNative", type: "bool" },
 34 |     ],
 35 |     anonymous: false,
 36 |   },
 37 |   {
 38 |     type: "function",
 39 |     name: "createAgreement",
 40 |     stateMutability: "nonpayable",
 41 |     inputs: [
 42 |       { internalType: "address", name: "vendor", type: "address" },
 43 |       { internalType: "address", name: "token", type: "address" },
 44 |       { internalType: "bool", name: "isNative", type: "bool" },
 45 |       {
 46 |         internalType: "struct Agreement.Milestone[]",
 47 |         name: "milestones",
 48 |         type: "tuple[]",
 49 |         components: [
 50 |           { internalType: "uint256", name: "amount", type: "uint256" },
 51 |           { internalType: "string", name: "description", type: "string" },
 52 |           { internalType: "bool", name: "released", type: "bool" },
 53 |         ],
 54 |       },
 55 |     ],
 56 |     outputs: [{ internalType: "address", name: "", type: "address" }],
 57 |   },
 58 | ] as const;
 59 | 
 60 | export const agreementAbi = [
 61 |   {
 62 |     type: "function",
 63 |     name: "customer",
 64 |     stateMutability: "view",
 65 |     inputs: [],
 66 |     outputs: [{ internalType: "address", name: "", type: "address" }],
 67 |   },
 68 |   {
 69 |     type: "function",
 70 |     name: "vendor",
 71 |     stateMutability: "view",
 72 |     inputs: [],
 73 |     outputs: [{ internalType: "address", name: "", type: "address" }],
 74 |   },
 75 |   {
 76 |     type: "function",
 77 |     name: "token",
 78 |     stateMutability: "view",
 79 |     inputs: [],
 80 |     outputs: [{ internalType: "address", name: "", type: "address" }],
 81 |   },
 82 |   {
 83 |     type: "function",
 84 |     name: "isNative",
 85 |     stateMutability: "view",
 86 |     inputs: [],
 87 |     outputs: [{ internalType: "bool", name: "", type: "bool" }],
 88 |   },
 89 |   {
 90 |     type: "function",
 91 |     name: "getMilestones",
 92 |     stateMutability: "view",
 93 |     inputs: [],
 94 |     outputs: [
 95 |       {
 96 |         internalType: "struct Agreement.Milestone[]",
 97 |         name: "",
 98 |         type: "tuple[]",
 99 |         components: [
100 |           { internalType: "uint256", name: "amount", type: "uint256" },
101 |           { internalType: "string", name: "description", type: "string" },
102 |           { internalType: "bool", name: "released", type: "bool" },
103 |         ],
104 |       },
105 |     ],
106 |   },
107 |   {
108 |     type: "function",
109 |     name: "fund",
110 |     stateMutability: "payable",
111 |     inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }],
112 |     outputs: [],
113 |   },
114 |   {
115 |     type: "function",
116 |     name: "releaseMilestone",
117 |     stateMutability: "nonpayable",
118 |     inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
119 |     outputs: [],
120 |   },
121 |   {
122 |     type: "function",
123 |     name: "withdraw",
124 |     stateMutability: "nonpayable",
125 |     inputs: [],
126 |     outputs: [],
127 |   },
128 |   {
129 |     type: "event",
130 |     name: "Funded",
131 |     inputs: [
132 |       { indexed: true, internalType: "address", name: "from", type: "address" },
133 |       {
134 |         indexed: false,
135 |         internalType: "uint256",
136 |         name: "amount",
137 |         type: "uint256",
138 |       },
139 |     ],
140 |     anonymous: false,
141 |   },
142 |   {
143 |     type: "event",
144 |     name: "MilestoneReleased",
145 |     inputs: [
146 |       {
147 |         indexed: true,
148 |         internalType: "uint256",
149 |         name: "index",
150 |         type: "uint256",
151 |       },
152 |       {
153 |         indexed: false,
154 |         internalType: "uint256",
155 |         name: "amount",
156 |         type: "uint256",
157 |       },
158 |       {
159 |         indexed: false,
160 |         internalType: "string",
161 |         name: "description",
162 |         type: "string",
163 |       },
164 |     ],
165 |     anonymous: false,
166 |   },
167 |   {
168 |     type: "event",
169 |     name: "Withdrawn",
170 |     inputs: [
171 |       { indexed: true, internalType: "address", name: "to", type: "address" },
172 |       {
173 |         indexed: false,
174 |         internalType: "uint256",
175 |         name: "amount",
176 |         type: "uint256",
177 |       },
178 |     ],
179 |     anonymous: false,
180 |   },
181 | ] as const;
182 | 


--------------------------------------------------------------------------------
/Frontend/lib/role.ts:
--------------------------------------------------------------------------------
1 | // lib/role.ts
2 | export function roleFromAddress(address: string): "VENDOR" | "CUSTOMER" {
3 |   // naive: route by path; or fetch user; or let them choose
4 |   return "CUSTOMER";
5 | }
6 | 


--------------------------------------------------------------------------------
/Frontend/lib/viem.ts:
--------------------------------------------------------------------------------
 1 | import { createPublicClient, createWalletClient, http, custom } from "viem";
 2 | import { baseSepolia } from "viem/chains";
 3 | import type { Chain } from "viem";
 4 | 
 5 | // public RPC
 6 | export const publicClient = createPublicClient({
 7 |   chain: baseSepolia as Chain,
 8 |   transport: http(
 9 |     process.env.NEXT_PUBLIC_RPC_URL ?? "https://sepolia.base.org"
10 |   ),
11 | });
12 | 
13 | // Try to derive a viem wallet client from a Dynamic wallet (EIP-1193)
14 | export async function walletClientFromDynamicWallet(wallet: any) {
15 |   // many Dynamic connectors expose an EIP-1193 provider on connector/provider
16 |   const eip1193 =
17 |     wallet?.connector?.provider ??
18 |     (await wallet?.connector?.getProvider?.()) ??
19 |     (globalThis as any).ethereum;
20 | 
21 |   if (!eip1193) throw new Error("No EIP-1193 provider from Dynamic wallet");
22 |   return createWalletClient({
23 |     account: wallet?.address as `0x${string}`, // AA smart account address is fine for AA flows
24 |     chain: baseSepolia as Chain,
25 |     transport: custom(eip1193),
26 |   });
27 | }
28 | 


--------------------------------------------------------------------------------
/Frontend/next.config.ts:
--------------------------------------------------------------------------------
1 | import type { NextConfig } from "next";
2 | 
3 | const nextConfig: NextConfig = {
4 |   /* config options here */
5 | };
6 | 
7 | export default nextConfig;
8 | 


--------------------------------------------------------------------------------
/Frontend/notes.txt:
--------------------------------------------------------------------------------
1 | Make a setup and usage file for dynamic on scaffold eth, I want to move this to a scafold eth 2 project 
2 | 
3 | If you want, I can drop in ready-to-paste files for:
4 | 	•	/vendor and /customer pages
5 | 	•	a trimmed AcceptAndDeploy button using your existing ABIs
6 | 	•	a Fern on-ramp server stub that reads FERN_API_KEY and returns a fake URL (so your UI flow works today, and you swap in the real endpoints later).


--------------------------------------------------------------------------------
/Frontend/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "leasevault",
 3 |   "version": "0.1.0",
 4 |   "private": true,
 5 |   "scripts": {
 6 |     "dev": "next dev --turbopack",
 7 |     "build": "next build",
 8 |     "start": "next start",
 9 |     "lint": "next lint"
10 |   },
11 |   "dependencies": {
12 |     "@dynamic-labs/ethereum": "^4.26.0",
13 |     "@dynamic-labs/ethereum-aa": "^4.26.0",
14 |     "@dynamic-labs/sdk-react-core": "^4.26.0",
15 |     "@openzeppelin/contracts": "^5.4.0",
16 |     "@prisma/client": "^6.14.0",
17 |     "next": "15.4.6",
18 |     "react": "19.1.0",
19 |     "react-dom": "19.1.0",
20 |     "viem": "^2.33.3",
21 |     "wagmi": "^2.16.3",
22 |     "zod": "^4.0.17"
23 |   },
24 |   "devDependencies": {
25 |     "@tailwindcss/postcss": "^4",
26 |     "@types/node": "^20",
27 |     "@types/react": "^19.1.10",
28 |     "@types/react-dom": "^19",
29 |     "hardhat": "^3.0.0",
30 |     "prisma": "^6.14.0",
31 |     "tailwindcss": "^4",
32 |     "typescript": "^5"
33 |   }
34 | }
35 | 


--------------------------------------------------------------------------------
/Frontend/postcss.config.mjs:
--------------------------------------------------------------------------------
1 | const config = {
2 |   plugins: ["@tailwindcss/postcss"],
3 | };
4 | 
5 | export default config;
6 | 


--------------------------------------------------------------------------------
/Frontend/public/file.svg:
--------------------------------------------------------------------------------
1 | <svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>


--------------------------------------------------------------------------------
/Frontend/public/globe.svg:
--------------------------------------------------------------------------------
1 | <svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>


--------------------------------------------------------------------------------
/Frontend/public/next.svg:
--------------------------------------------------------------------------------
1 | <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>


--------------------------------------------------------------------------------
/Frontend/public/vercel.svg:
--------------------------------------------------------------------------------
1 | <svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>


--------------------------------------------------------------------------------
/Frontend/public/window.svg:
--------------------------------------------------------------------------------
1 | <svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>


--------------------------------------------------------------------------------
/Frontend/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "target": "ES2017",
 4 |     "lib": [
 5 |       "dom",
 6 |       "dom.iterable",
 7 |       "esnext"
 8 |     ],
 9 |     "allowJs": true,
10 |     "skipLibCheck": true,
11 |     "strict": true,
12 |     "noEmit": true,
13 |     "esModuleInterop": true,
14 |     "module": "esnext",
15 |     "moduleResolution": "bundler",
16 |     "resolveJsonModule": true,
17 |     "isolatedModules": true,
18 |     "jsx": "preserve",
19 |     "incremental": true,
20 |     "plugins": [
21 |       {
22 |         "name": "next"
23 |       }
24 |     ],
25 |     "paths": {
26 |       "@/*": [
27 |         "./*"
28 |       ]
29 |     }
30 |   },
31 |   "include": [
32 |     "**/*.ts",
33 |     "**/*.tsx",
34 |     "Frontend/.next/types/**/*.ts",
35 |     "Frontend/contracts/scripts/deploy.js",
36 |     "next-env.d.ts",
37 |     ".next/types/**/*.ts"
38 |   ],
39 |   "exclude": [
40 |     "Frontend/node_modules"
41 |   ]
42 | }
43 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
 1 | This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
 2 | 
 3 | ## Getting Started
 4 | 
 5 | First, run the development server:
 6 | 
 7 | ```bash
 8 | npm run dev
 9 | # or
10 | yarn dev
11 | # or
12 | pnpm dev
13 | # or
14 | bun dev
15 | ```
16 | 
17 | Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
18 | 
19 | You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
20 | 
21 | This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
22 | 
23 | ## Learn More
24 | 
25 | To learn more about Next.js, take a look at the following resources:
26 | 
27 | - [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
28 | - [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
29 | 
30 | You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
31 | 
32 | ## Deploy on Vercel
33 | 
34 | The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
35 | 
36 | Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
37 | test
38 | 


--------------------------------------------------------------------------------
/lib/db.ts:
--------------------------------------------------------------------------------
 1 | // lib/db.ts
 2 | import { PrismaClient } from "@prisma/client";
 3 | 
 4 | // Augment the global type so TS knows about our singleton handle.
 5 | declare global {
 6 |   // eslint-disable-next-line no-var
 7 |   var __db: PrismaClient | undefined;
 8 | }
 9 | 
10 | export const db: PrismaClient = globalThis.__db ?? new PrismaClient();
11 | 
12 | if (process.env.NODE_ENV !== "production") {
13 |   globalThis.__db = db;
14 | }
15 | 


--------------------------------------------------------------------------------
/lib/fern.ts:
--------------------------------------------------------------------------------
 1 | // lib/fern.ts
 2 | export const FERN_BASE = process.env.FERN_BASE_URL!;
 3 | export const FERN_KEY = process.env.FERN_API_KEY!;
 4 | 
 5 | export async function fernFetch(path: string, init?: RequestInit) {
 6 |   const res = await fetch(`${FERN_BASE}${path}`, {
 7 |     ...init,
 8 |     headers: {
 9 |       ...(init?.headers ?? {}),
10 |       "Content-Type": "application/json",
11 |       Authorization: `Bearer ${FERN_KEY}`,
12 |     },
13 |     cache: "no-store",
14 |   });
15 |   if (!res.ok) {
16 |     const text = await res.text();
17 |     throw new Error(`Fern error ${res.status}: ${text}`);
18 |   }
19 |   return res.json();
20 | }
21 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "leasevault",
 3 |   "version": "1.0.0",
 4 |   "description": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).",
 5 |   "main": "index.js",
 6 |   "directories": {
 7 |     "lib": "lib"
 8 |   },
 9 |   "scripts": {
10 |     "test": "echo \"Error: no test specified\" && exit 1"
11 |   },
12 |   "keywords": [],
13 |   "author": "",
14 |   "license": "ISC",
15 |   "type": "commonjs",
16 |   "dependencies": {
17 |     "@prisma/client": "^6.14.0",
18 |     "prisma": "^6.14.0",
19 |     "viem": "^2.33.3",
20 |     "wagmi": "^2.16.3"
21 |   }
22 | }
23 | 


--------------------------------------------------------------------------------
/prisma/schema.prisma:
--------------------------------------------------------------------------------
 1 | datasource db {
 2 |   provider = "sqlite"
 3 |   url      = "file:./dev.db"
 4 | }
 5 | 
 6 | generator client {
 7 |   provider = "prisma-client-js"
 8 | }
 9 | 
10 | enum Role {
11 |   VENDOR
12 |   CUSTOMER
13 | }
14 | 
15 | enum AgreementStatus {
16 |   DRAFT
17 |   ACCEPTED
18 |   DEPLOYED
19 |   COMPLETED
20 |   CANCELED
21 | }
22 | 
23 | model User {
24 |   id        String  @id @default(cuid())
25 |   address   String  @unique
26 |   role      Role
27 |   createdAt DateTime @default(now())
28 |   updatedAt DateTime @updatedAt
29 |   agreementsCreated  Agreement[] @relation("VendorAgreements")
30 |   agreementsAssigned Agreement[] @relation("CustomerAgreements")
31 | }
32 | 
33 | model Agreement {
34 |   id        String  @id @default(cuid())
35 |   title     String
36 |   description String
37 |   vendorAddress   String
38 |   customerAddress String
39 |   status    AgreementStatus @default(DRAFT)
40 |   chainId   Int?
41 |   factoryAddress String?
42 |   contractAddress String? // filled after deploy
43 | 
44 |   // store milestone values as strings (wei) to avoid BigInt issues
45 |   milestones Milestone[]
46 | 
47 |   vendor    User? @relation("VendorAgreements", fields: [vendorAddress], references: [address])
48 |   customer  User? @relation("CustomerAgreements", fields: [customerAddress], references: [address])
49 | 
50 |   createdAt DateTime @default(now())
51 |   updatedAt DateTime @updatedAt
52 | }
53 | 
54 | model Milestone {
55 |   id          String  @id @default(cuid())
56 |   agreementId String
57 |   // amount in wei as string
58 |   amountWei   String
59 |   description String
60 |   released    Boolean @default(false)
61 |   releasedAt  DateTime?
62 | 
63 |   agreement   Agreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
64 | }


--------------------------------------------------------------------------------